name: CI/CD - Telegram Bot (Docker Compose)

on:
  push:
    branches: [ master, develop ]

  workflow_dispatch:
  
    inputs:
      target:
        description: "Where to deploy"
        type: choice
        required: true
        options: [staging, production]
        default: staging
      do_build:
        description: "Build & push image before deploy?"
        type: boolean
        required: true
        default: true
      image_tag:
        description: "Image tag to deploy (leave empty to use sha-<commit>)"
        type: string
        required: false
        default: ""

permissions:
  contents: read

concurrency:
  group: linkgp-${{ github.ref_name }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
  # If manual and image_tag provided -> use it, else use sha-<commit>.
  IMAGE_TAG: ${{ (github.event_name == 'workflow_dispatch' && inputs.image_tag) && inputs.image_tag || format('sha-{0}', github.sha) }}

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    # Build on push always; on manual only if do_build == true
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.do_build == true)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push with Buildx cache
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # On push: only when branch is develop. On manual: when target == staging.
    if: (github.event_name == 'push' && github.ref_name == 'develop') || (github.event_name == 'workflow_dispatch' && inputs.target == 'staging')
    needs: ${{ github.event_name == 'push' && 'build' || (github.event_name == 'workflow_dispatch' && inputs.do_build == true && 'build') || '' }}
    env:
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      DEPLOY_DIR: /home/saman/deploy/linkgp
      ENV_FILE: /home/saman/env/linkgp/.env
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
      IMAGE_TAG: ${{ env.IMAGE_TAG }}
      CONTAINER_NAME: linkgp-bot
    steps:
      - name: Prepare SSH
        run: |
          set -Eeuo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts

      - name: Copy docker-compose file to server
        run: |
          set -Eeuo pipefail
          ssh "$SERVER_USER@$SERVER_IP" "mkdir -p $DEPLOY_DIR"
          scp docker-compose.yml "$SERVER_USER@$SERVER_IP:$DEPLOY_DIR/docker-compose.yml"

      - name: Deploy with Docker Compose (with rollback)
        run: |
          set -Eeuo pipefail
          ssh "$SERVER_USER@$SERVER_IP" bash -lc '
            set -Eeuo pipefail
            DEPLOY_DIR="'$DEPLOY_DIR'"
            ENV_FILE="'$ENV_FILE'"
            IMAGE_NAME="'$IMAGE_NAME'"
            NEW_TAG="'$IMAGE_TAG'"
            META_DIR="$DEPLOY_DIR/.meta"
            COMPOSE_ENV="$DEPLOY_DIR/.compose.env"
            RELEASE_FILE="$META_DIR/release"

            mkdir -p "$META_DIR"

            # Load previous pointers if exist
            LAST_TAG=""
            PREV_TAG=""
            if [ -f "$RELEASE_FILE" ]; then . "$RELEASE_FILE"; fi

            # Write compose env vars to feed variables into compose
            cat > "$COMPOSE_ENV" <<EOF
IMAGE_NAME=$IMAGE_NAME
IMAGE_TAG=$NEW_TAG
ENV_FILE=$ENV_FILE
CONTAINER_NAME=linkgp-bot
EOF

            # Pull new image
            docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" pull

            # Start/Update
            if ! docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" up -d; then
              echo "Compose up failed."
              exit 1
            fi

            # Basic health check
            sleep 6
            if [ -z "$(docker ps -q -f name=linkgp-bot)" ]; then
              echo "New container is not running. Rolling back..."
              if [ -n "$LAST_TAG" ]; then
                cat > "$COMPOSE_ENV" <<EOF
IMAGE_NAME=$IMAGE_NAME
IMAGE_TAG=$LAST_TAG
ENV_FILE=$ENV_FILE
CONTAINER_NAME=linkgp-bot
EOF
                docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" pull || true
                docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" up -d || true
              fi
              exit 1
            fi

            # Update release pointers
            cat > "$RELEASE_FILE" <<EOF
LAST_TAG=$NEW_TAG
PREV_TAG=$LAST_TAG
EOF

            # Keep logs handy
            docker logs --tail=200 linkgp-bot || true

            # Prune old images safely
            docker image prune -f --filter "until=24h" || true
          '

  deploy_prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    # On push: only when branch is master. On manual: when target == production.
    if: (github.event_name == 'push' && github.ref_name == 'master') || (github.event_name == 'workflow_dispatch' && inputs.target == 'production')
    needs: ${{ github.event_name == 'push' && 'build' || (github.event_name == 'workflow_dispatch' && inputs.do_build == true && 'build') || '' }}
    env:
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      DEPLOY_DIR: /home/saman/deploy/linkgp
      ENV_FILE: /home/saman/env/linkgp/.env
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
      IMAGE_TAG: ${{ env.IMAGE_TAG }}
      CONTAINER_NAME: linkgp-bot
    steps:
      - name: Prepare SSH
        run: |
          set -Eeuo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts

      - name: Copy docker-compose file to server
        run: |
          set -Eeuo pipefail
          ssh "$SERVER_USER@$SERVER_IP" "mkdir -p $DEPLOY_DIR"
          scp docker-compose.yml "$SERVER_USER@$SERVER_IP:$DEPLOY_DIR/docker-compose.yml"

      - name: Deploy with Docker Compose (with rollback)
        run: |
          set -Eeuo pipefail
          ssh "$SERVER_USER@$SERVER_IP" bash -lc '
            set -Eeuo pipefail
            DEPLOY_DIR="'$DEPLOY_DIR'"
            ENV_FILE="'$ENV_FILE'"
            IMAGE_NAME="'$IMAGE_NAME'"
            NEW_TAG="'$IMAGE_TAG'"
            META_DIR="$DEPLOY_DIR/.meta"
            COMPOSE_ENV="$DEPLOY_DIR/.compose.env"
            RELEASE_FILE="$META_DIR/release"

            mkdir -p "$META_DIR"

            LAST_TAG=""
            PREV_TAG=""
            if [ -f "$RELEASE_FILE" ]; then . "$RELEASE_FILE"; fi

            cat > "$COMPOSE_ENV" <<EOF
IMAGE_NAME=$IMAGE_NAME
IMAGE_TAG=$NEW_TAG
ENV_FILE=$ENV_FILE
CONTAINER_NAME=linkgp-bot
EOF

            docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" pull

            if ! docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" up -d; then
              echo "Compose up failed."
              exit 1
            fi

            sleep 6
            if [ -z "$(docker ps -q -f name=linkgp-bot)" ]; then
              echo "New container is not running. Rolling back..."
              if [ -n "$LAST_TAG" ]; then
                cat > "$COMPOSE_ENV" <<EOF
IMAGE_NAME=$IMAGE_NAME
IMAGE_TAG=$LAST_TAG
ENV_FILE=$ENV_FILE
CONTAINER_NAME=linkgp-bot
EOF
                docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" pull || true
                docker compose -f "$DEPLOY_DIR/docker-compose.yml" --env-file "$COMPOSE_ENV" up -d || true
              fi
              exit 1
            fi

            cat > "$RELEASE_FILE" <<EOF
LAST_TAG=$NEW_TAG
PREV_TAG=$LAST_TAG
EOF

            docker logs --tail=200 linkgp-bot || true
            docker image prune -f --filter "until=24h" || true
          '
