name: Deploy Docker Container (Compose)

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: linkgp-deploy
  cancel-in-progress: false

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}              # optional; leave empty to use 22
      SERVER_DEPLOY_DIR: ${{ secrets.SERVER_DEPLOY_DIR }}  # e.g. /home/saman/deploy/linkgp
      SERVER_ENV_FILE: "/home/saman/env/linkgp/.env"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          set -Eeuo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          # write key safely and strip CR if any
          printf '%s' "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts 2>/dev/null
          # quick sanity check (no output on success)
          ssh-keygen -y -f ~/.ssh/id_rsa >/dev/null 2>&1 || { echo "Invalid SSH key"; exit 1; }

      - name: Verify SSH connectivity
        run: |
          set -Eeuo pipefail
          PORT="${SERVER_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$PORT" "$SERVER_USER@$SERVER_IP" "echo 'SSH connection OK'"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image (latest + sha tag)
        run: |
          docker build -t "$IMAGE_NAME:latest" -t "$IMAGE_NAME:sha-${GITHUB_SHA}" .
          docker images

      - name: Push images
        run: |
          docker push "$IMAGE_NAME:latest"
          docker push "$IMAGE_NAME:sha-${GITHUB_SHA}"

      - name: Ensure deploy dir on server
        run: |
          set -Eeuo pipefail
          PORT="${SERVER_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -p "$PORT" "$SERVER_USER@$SERVER_IP" "mkdir -p '$SERVER_DEPLOY_DIR'"

      - name: Copy docker-compose.yml to server
        run: |
          set -Eeuo pipefail
          test -f docker-compose.yml || (echo "docker-compose.yml not found at repo root"; exit 1)
          PORT="${SERVER_PORT:-22}"
          scp -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -P "$PORT" docker-compose.yml "$SERVER_USER@$SERVER_IP:$SERVER_DEPLOY_DIR/docker-compose.yml"

      - name: Deploy with Docker Compose (pull + up -d)
        run: |
          set -Eeuo pipefail
          PORT="${SERVER_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$PORT" "$SERVER_USER@$SERVER_IP" "
            IMAGE_NAME='$IMAGE_NAME' IMAGE_TAG='sha-${GITHUB_SHA}' ENV_FILE='$SERVER_ENV_FILE' CONTAINER_NAME='$CONTAINER_NAME' \
            docker compose -f '$SERVER_DEPLOY_DIR/docker-compose.yml' pull && \
            IMAGE_NAME='$IMAGE_NAME' IMAGE_TAG='sha-${GITHUB_SHA}' ENV_FILE='$SERVER_ENV_FILE' CONTAINER_NAME='$CONTAINER_NAME' \
            docker compose -f '$SERVER_DEPLOY_DIR/docker-compose.yml' up -d
          "

      - name: Check if container is running
        run: |
          set -Eeuo pipefail
          PORT="${SERVER_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes -p "$PORT" "$SERVER_USER@$SERVER_IP" "
            if [ \$(docker ps -q -f name='$CONTAINER_NAME' | wc -l) -eq 1 ]; then
              echo 'Container is running';
            else
              echo 'Container is not running'; exit 1;
            fi
          "
